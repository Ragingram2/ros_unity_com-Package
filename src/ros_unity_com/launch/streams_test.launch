<launch>
   <!-- launch color stream -->
   <include file="$(find video_stream_opencv)/launch/camera.launch" >
   		<!-- node name and ros graph name -->
	  	<arg name="camera_name" value="color0" />
	  	<!-- url of the video stream -->
	  	<arg name="video_stream_provider" value="rtsp://145.76.27.51:8554/camera0" />
	  	<!-- set camera fps to (does nothing on a stream)-->
	  	<arg name="set_camera_fps" value="20"/>
	      	<!-- set buffer queue size of frame capturing to -->
	      	<arg name="buffer_queue_size" value="1000" />
	  	<!-- throttling the querying of frames to -->
	  	<arg name="fps" value="20" />
	  	<!-- setting frame_id -->
	  	<arg name="frame_id" value="pointcloud_frame" />
	  	<!-- camera info loading, take care as it needs the "file:///" at the start , e.g.:
	  	"file:///$(find your_camera_package)/config/your_camera.yaml" -->
	  	<arg name="camera_info_url" value="file:///$(find ros_unity_com)/config/color0.yaml" />
	  	<!-- flip the image horizontally (mirror it) -->
	  	<arg name="flip_horizontal" value="false" />
	  	<!-- flip the image vertically -->
	  	<arg name="flip_vertical" value="false" />
	  	<!-- visualize on an image_view window the stream generated -->
	  	<arg name="visualize" value="false" />
   </include>
   <include file="$(find video_stream_opencv)/launch/camera.launch" >
   		<!-- node name and ros graph name -->
	  	<arg name="camera_name" value="color1" />
	  	<!-- url of the video stream -->
	  	<arg name="video_stream_provider" value="rtsp://145.76.27.51:8554/camera1" />
	  	<!-- set camera fps to (does nothing on a stream)-->
	  	<arg name="set_camera_fps" value="20"/> 
	      	<!-- set buffer queue size of frame capturing to -->
	      	<arg name="buffer_queue_size" value="1000" />
	  	<!-- throttling the querying of frames to -->
	  	<arg name="fps" value="20" />
	  	<!-- setting frame_id -->
	  	<arg name="frame_id" value="pointcloud_frame" />
	  	<!-- camera info loading, take care as it needs the "file:///" at the start , e.g.:
	  	"file:///$(find your_camera_package)/config/your_camera.yaml" -->
	  	<arg name="camera_info_url" value="file:///$(find ros_unity_com)/config/color1.yaml" />
	  	<!-- flip the image horizontally (mirror it) -->
	  	<arg name="flip_horizontal" value="false" />
	  	<!-- flip the image vertically -->
	  	<arg name="flip_vertical" value="false" />
	  	<!-- visualize on an image_view window the stream generated -->
	  	<arg name="visualize" value="false" />
   </include>
   <include file="$(find video_stream_opencv)/launch/camera.launch" >
   		<!-- node name and ros graph name -->
	  	<arg name="camera_name" value="color2" />
	  	<!-- url of the video stream -->
	  	<arg name="video_stream_provider" value="rtsp://145.76.27.51:8554/camera2" />
	  	<!-- set camera fps to (does nothing on a stream)-->
	  	<arg name="set_camera_fps" value="20"/>
	      	<!-- set buffer queue size of frame capturing to -->
	      	<arg name="buffer_queue_size" value="1000" />
	  	<!-- throttling the querying of frames to -->
	  	<arg name="fps" value="20" />
	  	<!-- setting frame_id -->
	  	<arg name="frame_id" value="pointcloud_frame" />
	  	<!-- camera info loading, take care as it needs the "file:///" at the start , e.g.:
	  	"file:///$(find your_camera_package)/config/your_camera.yaml" -->
	  	<arg name="camera_info_url" value="file:///$(find ros_unity_com)/config/color2.yaml" />
	  	<!-- flip the image horizontally (mirror it) -->
	  	<arg name="flip_horizontal" value="false" />
	  	<!-- flip the image vertically -->
	  	<arg name="flip_vertical" value="false" />
	  	<!-- visualize on an image_view window the stream generated -->
	  	<arg name="visualize" value="false" />
   </include>
   <include file="$(find video_stream_opencv)/launch/camera.launch" >
   		<!-- node name and ros graph name -->
	  	<arg name="camera_name" value="color3" />
	  	<!-- url of the video stream -->
	  	<arg name="video_stream_provider" value="rtsp://145.76.27.51:8554/camera3" />
	  	<!-- set camera fps to (does nothing on a stream)-->
	  	<arg name="set_camera_fps" value="20"/>
	      	<!-- set buffer queue size of frame capturing to -->
	      	<arg name="buffer_queue_size" value="1000" />
	  	<!-- throttling the querying of frames to -->
	  	<arg name="fps" value="20" />
	  	<!-- setting frame_id -->
	  	<arg name="frame_id" value="pointcloud_frame" />
	  	<!-- camera info loading, take care as it needs the "file:///" at the start , e.g.:
	  	"file:///$(find your_camera_package)/config/your_camera.yaml" -->
	  	<arg name="camera_info_url" value="file:///$(find ros_unity_com)/config/color3.yaml" />
	  	<!-- flip the image horizontally (mirror it) -->
	  	<arg name="flip_horizontal" value="false" />
	  	<!-- flip the image vertically -->
	  	<arg name="flip_vertical" value="false" />
	  	<!-- visualize on an image_view window the stream generated -->
	  	<arg name="visualize" value="false" />
   </include>

	<!-- launch depth stream -->
	<include file="$(find video_stream_opencv)/launch/camera.launch" >
   		<!-- node name and ros graph name -->
	  	<arg name="camera_name" value="depth0" />
	  	<!-- url of the video stream -->
	  	<arg name="video_stream_provider" value="rtsp://145.76.27.51:8554/depth0" />
	  	<!-- set camera fps to (does nothing on a stream)-->
	  	<arg name="set_camera_fps" value="20"/>
	      	<!-- set buffer queue size of frame capturing to -->
	      	<arg name="buffer_queue_size" value="1000" />
	  	<!-- throttling the querying of frames to -->
	  	<arg name="fps" value="20" />
	  	<!-- setting frame_id -->
	  	<arg name="frame_id" value="pointcloud_frame" />
	  	<!-- camera info loading, take care as it needs the "file:///" at the start , e.g.:
	  	"file:///$(find your_camera_package)/config/your_camera.yaml" -->
	  	<arg name="camera_info_url" value="file:///$(find ros_unity_com)/config/depth0.yaml" />
	  	<!-- flip the image horizontally (mirror it) -->
	  	<arg name="flip_horizontal" value="false" />
	  	<!-- flip the image vertically -->
	  	<arg name="flip_vertical" value="false" />
	  	<!-- visualize on an image_view window the stream generated -->
	  	<arg name="visualize" value="false" />
   </include>
   <include file="$(find video_stream_opencv)/launch/camera.launch" >
   		<!-- node name and ros graph name -->
	  	<arg name="camera_name" value="depth1" />
	  	<!-- url of the video stream -->
	  	<arg name="video_stream_provider" value="rtsp://145.76.27.51:8554/depth1" />
	  	<!-- set camera fps to (does nothing on a stream)-->
	  	<arg name="set_camera_fps" value="20"/> 
	      	<!-- set buffer queue size of frame capturing to -->
	      	<arg name="buffer_queue_size" value="1000" />
	  	<!-- throttling the querying of frames to -->
	  	<arg name="fps" value="20" />
	  	<!-- setting frame_id -->
	  	<arg name="frame_id" value="pointcloud_frame" />
	  	<!-- camera info loading, take care as it needs the "file:///" at the start , e.g.:
	  	"file:///$(find your_camera_package)/config/your_camera.yaml" -->
	  	<arg name="camera_info_url" value="file:///$(find ros_unity_com)/config/depth1.yaml" />
	  	<!-- flip the image horizontally (mirror it) -->
	  	<arg name="flip_horizontal" value="false" />
	  	<!-- flip the image vertically -->
	  	<arg name="flip_vertical" value="false" />
	  	<!-- visualize on an image_view window the stream generated -->
	  	<arg name="visualize" value="false" />
   </include>
   <include file="$(find video_stream_opencv)/launch/camera.launch" >
   		<!-- node name and ros graph name -->
	  	<arg name="camera_name" value="depth2" />
	  	<!-- url of the video stream -->
	  	<arg name="video_stream_provider" value="rtsp://145.76.27.51:8554/depth2" />
	  	<!-- set camera fps to (does nothing on a stream)-->
	  	<arg name="set_camera_fps" value="20"/>
	      	<!-- set buffer queue size of frame capturing to -->
	      	<arg name="buffer_queue_size" value="1000" />
	  	<!-- throttling the querying of frames to -->
	  	<arg name="fps" value="20" />
	  	<!-- setting frame_id -->
	  	<arg name="frame_id" value="pointcloud_frame" />
	  	<!-- camera info loading, take care as it needs the "file:///" at the start , e.g.:
	  	"file:///$(find your_camera_package)/config/your_camera.yaml" -->
	  	<arg name="camera_info_url" value="file:///$(find ros_unity_com)/config/depth2.yaml" />
	  	<!-- flip the image horizontally (mirror it) -->
	  	<arg name="flip_horizontal" value="false" />
	  	<!-- flip the image vertically -->
	  	<arg name="flip_vertical" value="false" />
	  	<!-- visualize on an image_view window the stream generated -->
	  	<arg name="visualize" value="false" />
   </include>
   <include file="$(find video_stream_opencv)/launch/camera.launch" >
   		<!-- node name and ros graph name -->
	  	<arg name="camera_name" value="depth3" />
	  	<!-- url of the video stream -->
	  	<arg name="video_stream_provider" value="rtsp://145.76.27.51:8554/depth3" />
	  	<!-- set camera fps to (does nothing on a stream)-->
	  	<arg name="set_camera_fps" value="20"/>
	      	<!-- set buffer queue size of frame capturing to -->
	      	<arg name="buffer_queue_size" value="1000" />
	  	<!-- throttling the querying of frames to -->
	  	<arg name="fps" value="20" />
	  	<!-- setting frame_id -->
	  	<arg name="frame_id" value="pointcloud_frame" />
	  	<!-- camera info loading, take care as it needs the "file:///" at the start , e.g.:
	  	"file:///$(find your_camera_package)/config/your_camera.yaml" -->
	  	<arg name="camera_info_url" value="file:///$(find ros_unity_com)/config/depth3.yaml" />
	  	<!-- flip the image horizontally (mirror it) -->
	  	<arg name="flip_horizontal" value="false" />
	  	<!-- flip the image vertically -->
	  	<arg name="flip_vertical" value="false" />
	  	<!-- visualize on an image_view window the stream generated -->
	  	<arg name="visualize" value="false" />
   </include>
</launch>
